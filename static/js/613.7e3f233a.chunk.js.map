{"version":3,"file":"static/js/613.7e3f233a.chunk.js","mappings":"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","sources":["ContactItem.jsx","redux/contacts/selectors.js","ContactList.jsx","../node_modules/nanoid/index.browser.js","components/Forms/ContactForm.jsx","pages/Contacts.jsx"],"sourcesContent":["import { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/operations';\nimport PropTypes from 'prop-types';\n\nexport const ContactItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n  const deleteThisContact = (id) => {\n    dispatch(deleteContact(id));\n  };\n\n  return (\n    <div className=\"contact-item\" key={id}>\n      <div className=\"contact-icon\">\n      </div>\n      <div className=\"contact-name\">\n        <p>{name}:</p>\n      </div>\n      <div className=\"contact-number\">\n        <p>{number}</p>\n      </div>\n      <div className=\"contact-buttons\">\n        <button className=\"delete-button\" onClick={() => deleteThisContact(id)}>\n          Delete\n        </button>\n      </div>\n    </div>\n  );\n};\n\nContactItem.propTypes = {\n  id: PropTypes.string,\n  name: PropTypes.string,\n  number: PropTypes.string,\n};\n\n\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contactsList.contacts.items;\nexport const selectIsLoading = state => state.contactsList.contacts.isLoading;\nexport const selectError = state => state.contactsList.contacts.error;\nexport const selectFilter = state => state.filter.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (items, filter) => {\n    return items.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import React from 'react';\nimport { ContactItem } from './ContactItem';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectError, selectIsLoading, selectVisibleContacts } from 'redux/contacts/selectors';\nimport { useEffect } from 'react';\nimport { Loader } from 'components/Loader';\nimport { fetchContacts } from 'redux/operations';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const filteredContacts = useSelector(selectVisibleContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {filteredContacts.length > 0 && (\n        <div>\n          {filteredContacts.map(({ id, name, number }) => (\n            <ContactItem key={id} name={name} number={number} id={id} />\n          ))}\n        </div>\n      )}\n      {error && alert('Sorry, something is wrong!')}\n    </>\n  );\n};\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/operations';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const inputChange = (event) => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const dataSubmit = (event) => {\n    event.preventDefault();\n\n    const newContact = {\n      id: nanoid(),\n      name: name,\n      number: number,\n    };\n\n    if (\n      contacts.find(\n        (contact) => contact.name.toLowerCase() === newContact.name.toLowerCase()\n      )\n    ) {\n      alert(`${newContact.name} is already in contacts`);\n      return;\n    }\n\n    dispatch(addContact(newContact));\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <div className='loginPageContainer'>\n    <form className=\"form contact-form\" onSubmit={dataSubmit}>\n      <label className=\"formLabel\">\n        Name:\n        <input\n          className=\"form-input input inputField\"\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={inputChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n      <label className=\"form-label label\">\n        Number:\n        <input\n          className=\"form-input input inputField\"\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={inputChange}\n          pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </label>\n      <button className=\"form-button submitButton\" type=\"submit\">\n        Add contact\n      </button>\n    </form>\n    </div>\n  );\n};\n\n","import { ContactList } from 'ContactList';\nimport { ContactForm } from 'components/Forms/ContactForm';\nconst Contacts = () => {\n  return (\n    <div className=\"app-container\">\n    <ContactForm />\n    <ContactList />\n  </div>\n  );\n};\n\nexport default Contacts;\n"],"names":["ContactItem","id","name","number","dispatch","useDispatch","className","onClick","deleteContact","deleteThisContact","selectContacts","state","contactsList","contacts","items","selectIsLoading","isLoading","selectError","error","selectVisibleContacts","createSelector","filter","contact","toLowerCase","includes","ContactList","useSelector","filteredContacts","useEffect","fetchContacts","Loader","length","map","alert","nanoid","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","ContactForm","useState","setName","setNumber","inputChange","event","target","value","reset","onSubmit","preventDefault","newContact","find","addContact","type","onChange","pattern","title","required"],"sourceRoot":""}